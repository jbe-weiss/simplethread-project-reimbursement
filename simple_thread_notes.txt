input:
	- "scenario' project/s (make obj, define elements/funcs below)
		- start date (mm/dd/yy - find date/time python type that makes sense)
		- end date (mm/dd/yy - "")
		- high/low cost city (custom "city_cost_enum", string, or bool)
		
output:
	- reimbursement $ for set of projects

	
reimbursement calculation:
	: reimb =  45 * num_days_travel_lowcost + 55 * num_days_travel_highcost + 75 * num_days_full_lowcost + 85*num_days_fullhighcost
	
	- to get num days travel and num full days:
	foreach proj (?)	
	- if x proj end date > or = y proj start date
		- 2 travel days, y_end - x_start -1 full days 
	- else
		- 2 travel days, proj_end - proj_start - 1 full days
			
possible questions:
	- if projs overlap and a travel day is the same as a full day, do we still just reimburse for a full day?
	- if a project overlaps from high to low cost city, reimburse high cost?
	- are there ever 3 projects going on at a time?
	- could the list/input data be out of order/should i do any input normalization/validation or just solve for the three examples
	
notes: 
	- starts 6/12 ends 6/15
	- travel 12, 15
	- full 13, 14
	
	any proj has 2 travels
	full = end - start - 1
	
algo:
 count thru all dates from beginingn to end of set
 	each day gets 1 value:
 		none: day does not exist in any set
 		low travel: cost type low, beginning or end of a project, not in any other project
 		low full: cost type low, within a low projects date or 2
 		high travel: high type, beginging or end of project, not in any other project
 		high full
 		
 		
 - create set of vals for each day, iterate through each projects day see if its been reimbursed
 - new idea: create dict for each day as you iterate through project days, check if it already exists and what it is then make reimb judgment at the end